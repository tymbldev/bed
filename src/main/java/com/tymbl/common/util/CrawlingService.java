package com.tymbl.common.util;

import com.tymbl.common.service.AIService;
import com.tymbl.jobs.entity.Company;
import java.time.LocalDateTime;
import java.util.Optional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@RequiredArgsConstructor
public class CrawlingService {

    private final AIService aiService;

    public static class CrawlResult {
        private final Company company;
        private final String rawData;
        
        public CrawlResult(Company company, String rawData) {
            this.company = company;
            this.rawData = rawData;
        }
        
        public Company getCompany() {
            return company;
        }
        
        public String getRawData() {
            return rawData;
        }
    }

    public Optional<CrawlResult> crawlCompanyPage(String linkedinUrl) {
        try {
            // Extract company name from LinkedIn URL
            String companyName = extractCompanyNameFromUrl(linkedinUrl);
            if (companyName == null || companyName.trim().isEmpty()) {
                log.error("Could not extract company name from URL: {}", linkedinUrl);
                return Optional.empty();
            }

            log.info("Generating company information for: {} using AI Service", companyName);
            
            // Use AI Service to generate company information based on company name
            Optional<Company> generatedCompany = aiService.generateCompanyInfo(companyName, linkedinUrl);
            
            if (generatedCompany.isPresent()) {
                Company company = generatedCompany.get();
                // Ensure the LinkedIn URL is set
                company.setLinkedinUrl(linkedinUrl);
                log.info("Successfully generated company information for: {}", company.getName());
                
                // Create a summary of the generated data as raw data
                String rawData = createRawDataSummary(company);
                return Optional.of(new CrawlResult(company, rawData));
            } else {
                log.warn("Failed to generate company information for: {}", companyName);
                // Fallback: create a basic company object
                Company company = new Company();
                company.setName(companyName);
                company.setLinkedinUrl(linkedinUrl);
                company.setLastCrawledAt(LocalDateTime.now());
                company.setCrawled(true);
                company.setCrawledData("Generated using AI Service - Company: " + companyName);
                return Optional.of(new CrawlResult(company, "Generated using AI Service"));
            }
        } catch (Exception e) {
            log.error("Error generating company information for URL: " + linkedinUrl, e);
            return Optional.empty();
        }
    }

    private String extractCompanyNameFromUrl(String linkedinUrl) {
        try {
            // Extract company name from LinkedIn URL
            // Example: https://www.linkedin.com/company/google -> google
            if (linkedinUrl.contains("/company/")) {
                String[] parts = linkedinUrl.split("/company/");
                if (parts.length > 1) {
                    String companyPart = parts[1];
                    // Remove any trailing slashes or parameters
                    companyPart = companyPart.split("/")[0];
                    companyPart = companyPart.split("\\?")[0];
                    return companyPart;
                }
            }
            return null;
        } catch (Exception e) {
            log.warn("Error extracting company name from URL: {}", linkedinUrl, e);
            return null;
        }
    }

    private String createRawDataSummary(Company company) {
        StringBuilder summary = new StringBuilder();
        summary.append("Company Information Generated by AI Service\n");
        summary.append("==========================================\n\n");
        summary.append("Name: ").append(company.getName()).append("\n");
        summary.append("Description: ").append(company.getDescription()).append("\n");
        summary.append("Website: ").append(company.getWebsite()).append("\n");
        summary.append("Career Page URL: ").append(company.getCareerPageUrl()).append("\n");
        summary.append("Industry: ").append(company.getIndustry()).append("\n");
        summary.append("Headquarters: ").append(company.getHeadquarters()).append("\n");
        summary.append("Company Size: ").append(company.getCompanySize()).append("\n");
        summary.append("Specialties: ").append(company.getSpecialties()).append("\n");
        summary.append("About Us: ").append(company.getAboutUs()).append("\n");
        summary.append("Mission: ").append(company.getMission()).append("\n");
        summary.append("Vision: ").append(company.getVision()).append("\n");
        summary.append("Culture: ").append(company.getCulture()).append("\n");
        summary.append("LinkedIn URL: ").append(company.getLinkedinUrl()).append("\n");
        summary.append("Generated At: ").append(company.getLastCrawledAt()).append("\n");
        return summary.toString();
    }
} 